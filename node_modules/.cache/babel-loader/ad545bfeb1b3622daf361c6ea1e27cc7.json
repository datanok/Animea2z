{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = TagElementType;\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _processNodes = require('../processNodes');\nvar _processNodes2 = _interopRequireDefault(_processNodes);\nvar _generatePropsFromAttributes = require('../utils/generatePropsFromAttributes');\nvar _generatePropsFromAttributes2 = _interopRequireDefault(_generatePropsFromAttributes);\nvar _VoidElements = require('../dom/elements/VoidElements');\nvar _VoidElements2 = _interopRequireDefault(_VoidElements);\nvar _isValidTagOrAttributeName = require('../utils/isValidTagOrAttributeName');\nvar _isValidTagOrAttributeName2 = _interopRequireDefault(_isValidTagOrAttributeName);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Converts any element (excluding style - see StyleElementType - and script) to a react element.\n *\n * @param {Object} node The tag node\n * @param {String} index The index of the React element relative to it's parent\n * @param {Function} transform The transform function to apply to all children\n * @returns {React.Element} The React tag element\n */\nfunction TagElementType(node, index, transform) {\n  var tagName = node.name;\n\n  // validate tag name\n  if (!(0, _isValidTagOrAttributeName2.default)(tagName)) {\n    return null;\n  }\n\n  // generate props\n  var props = (0, _generatePropsFromAttributes2.default)(node.attribs, index);\n\n  // If the node is not a void element and has children then process them\n  var children = null;\n  if (_VoidElements2.default.indexOf(tagName) === -1) {\n    children = (0, _processNodes2.default)(node.children, transform);\n  }\n\n  // create and return the element\n  return _react2.default.createElement(tagName, props, children);\n}","map":null,"metadata":{},"sourceType":"script"}